\section{Описание}

Задача о принадлежности точки многоугольнику является фундаментальной темой в вычислительной геометрии. Существует много алгоритмов для решени данной задачи, такие как метод трассировки лучей, учёт числа оборотов, суммирование углов. Все эти алгоритмы работают без предварительной обработки фигуры. В данной работе мне пришлось работать с препроцессингом, использующим персистентную структуру данных (сбалансированное AVL-дерево). 

Допустим, что у нас есть фигуры, изображенные на рис. 1. 

\begin{figure}[h]
  \subfigure[рис. 1]{\includegraphics[scale=0.4]{../plots/1.jpg}}
  \subfigure[рис. 2]{\includegraphics[scale=0.4]{../plots/2.jpg} \captionof{f}{5}}
\end{figure}

Тогда всю плоскость можно мысленно разбить на плиты (slabs в английской литературе), проведя через каждую точку вертикальную прямую (рис. 2). 

Если многоугольники без самопересечений, то мы можем гарантировать, что внутри каждой плиты части ребер можно упорядочить (определить оператор отношения), а это значит, что мы сможем использовать бинарный поиск или в данном случае поиск в сбалансированном дереве. Вообще если брать произвольные отрезки, то упорядочить их невозможно, однако разбиение на плиты позволяет нам это сделать. Таким образом сложность поиска должна составить $O(log_2^2(n))$  

\newpage

\section{Исходный код}

Класс Графа содержит хэш-таблицу, где ключом является номер вершины, а значением множество вершин, в которые есть путь из данной. Метод AddEdge добавляет ребро неориентированного графа. Метод Components возвращает список компонент связности.

\begin{lstlisting}[language=c++]
class Graph {

	using vertex_type = size_t;

	public:
		unordered_map<vertex_type, set<vertex_type>> edges;

	Graph() = default;
	Graph(const size_t n) {
		for (size_t i = 1; i <= n; i++) 
			edges[i] = set<vertex_type>{i};
	}

	void AddEdge(const vertex_type& from, const vertex_type& to) {
		edges[from].insert(to);
		edges[to].insert(from);
	}

	vector<vector<vertex_type>> Components() {
		vector<vector<vertex_type>> result;
		map<vertex_type, vertex_type> visited;
		vertex_type current;

		for (const auto& vt : edges) {
			if (visited.find(vt.first) == visited.end()) {

				current = vt.first;
				vector<vertex_type> p;
				queue<vertex_type> queue;

				queue.push(current);
		
				while (!queue.empty()) {
					current = queue.front();
					queue.pop();

					if (visited.find(current) == visited.end()) {
						visited.insert({current, current});
						p.push_back(current);

						for (const vertex_type& ver : edges[current]) {
							queue.push(ver);
						}
					}
				}

				sort(p.begin(), p.end());
				result.push_back(p);

			}
		}

		sort(result.begin(), result.end(), 
		[](const vector<vertex_type>& v1, const vector<vertex_type> v2) {
			return v1 < v2;
		});

		return result;
	}
};
\end{lstlisting}

В main считывается количество вершин и ребер, затем создается граф из n-1 вершины и добавляются ребра. Затем ищем компоненты связности и печатаем на экран.

\begin{lstlisting}[language=c++]
int main() {

	size_t n = 0, m = 0;
	cin >> n >> m;

	Graph gr(n);

	for (size_t i = 0; i < m; i++) {
		size_t from, to;
		cin >> from >> to;
		gr.AddEdge(from, to);
	}

	print(gr.Components());

	return 0;
}
\end{lstlisting}

\pagebreak

\section{Консоль}
\begin{alltt}
igor@igor-Aspire-A315-53G:~/Рабочий стол/c++/DA/lab9$ ./main.out
5 4
1 2
2 3
1 3
4 5
1 2 3 
4 5
igor@igor-Aspire-A315-53G:~/Рабочий стол/c++/DA/lab9$ ./main.out
5 4
1 1
1 1
1 1
1 1
1 
2 
3 
4 
5 
igor@igor-Aspire-A315-53G:~/Рабочий стол/c++/DA/lab9$
\end{alltt}
\pagebreak
